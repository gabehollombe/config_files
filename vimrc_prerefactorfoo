" Modeline and Notes {
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker spell:
" }

" Environment {
  set nocompatible        " must be first line

  " Setup Bundle Support {
  " The next three lines ensure that the ~/.vim/bundle/ system works
    filetype on
    filetype off
    set rtp+=~/.vim/bundle/vundle
    call vundle#rc()
  " }
" }

" Bundles {
" Modeline and Notes {
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"                    __ _ _____              _
"         ___ _ __  / _/ |___ /      __   __(_)_ __ ___
"        / __| '_ \| |_| | |_ \ _____\ \ / /| | '_ ` _ \
"        \__ \ |_) |  _| |___) |_____|\ V / | | | | | | |
"        |___/ .__/|_| |_|____/        \_/  |_|_| |_| |_|
"            |_|
"
"   This is the personal .vimrc.bundles file of Steve Francia.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   You can find me at http://spf13.com
" }

" Environment {
    " Basics {
        set nocompatible        " must be first line
        set background=dark     " Assume a dark background
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
        endif
    " }
    "
    " Setup Bundle Support {
    " The next three lines ensure that the ~/.vim/bundle/ system works
        filetype off
        set rtp+=~/.vim/bundle/vundle
        call vundle#rc()
    " }

" }

" Bundles {
    " Deps
        Bundle 'gmarik/vundle'
        Bundle 'MarcWeber/vim-addon-mw-utils'
        Bundle 'tomtom/tlib_vim'
        if executable('ack-grep')
            let g:ackprg="ack-grep -H --nocolor --nogroup --column"
            Bundle 'mileszs/ack.vim'
        elseif executable('ack')
            Bundle 'mileszs/ack.vim'
        endif

    " General
        Bundle 'scrooloose/nerdtree'
        Bundle 'altercation/vim-colors-solarized'
        Bundle 'spf13/vim-colors'
        Bundle 'tpope/vim-surround'
        " Bundle 'AutoClose'
        Bundle 'kien/ctrlp.vim'
        " Bundle 'vim-scripts/sessionman.vim'
        Bundle 'matchit.zip'
        Bundle 'Lokaltog/vim-powerline'
        Bundle 'Lokaltog/vim-easymotion'

        "Make gvim color schemes work in terminal
        Bundle 'godlygeek/csapprox' 

        Bundle 'jistr/vim-nerdtree-tabs'
        Bundle 'flazz/vim-colorschemes'
        Bundle 'mbbill/undotree'
        Bundle 'nathanaelkane/vim-indent-guides'
        " Bundle 'vim-scripts/restore_view.vim'
        " Bundle 'tpope/vim-abolish.git'

    " General Programming
        " Pick one of the checksyntax, jslint, or syntastic
        Bundle 'scrooloose/syntastic'
        Bundle 'tpope/vim-fugitive'
        Bundle 'mattn/webapi-vim'
        Bundle 'mattn/gist-vim'
        Bundle 'scrooloose/nerdcommenter'

        "For aligning ='s, :'s, etc
        Bundle 'godlygeek/tabular' 

        if executable('ctags')
            Bundle 'majutsushi/tagbar'
        endif

    " Snippets & AutoComplete
        " Bundle 'Shougo/neocomplcache'
        " Bundle 'Shougo/neosnippet'
        " Bundle 'honza/snipmate-snippets'

    " Python
        " Pick either python-mode or pyflakes & pydoc
        " Bundle 'klen/python-mode'
        " Bundle 'python.vim'
        " Bundle 'python_match.vim'
        " Bundle 'pythoncomplete'

    " Javascript
        Bundle 'leshill/vim-json'
        Bundle 'groenewege/vim-less'
        Bundle 'pangloss/vim-javascript'
        Bundle 'briancollins/vim-jst'
        Bundle 'vim-coffee-script'
        


    " HTML
        Bundle 'amirh/HTML-AutoCloseTag'
        Bundle 'hail2u/vim-css3-syntax'

    " Ruby
        Bundle 'tpope/vim-rails'
        let g:rubycomplete_buffer_loading = 1
        "let g:rubycomplete_classes_in_global = 1
        "let g:rubycomplete_rails = 1

    " Misc
        Bundle 'tpope/vim-markdown'
        Bundle 'spf13/vim-preview'
" }

" General {
    " set autowrite                  " automatically write a file when leaving a modified buffer
    set shortmess+=filmnrxoOtT      " abbrev. of messages (avoids 'hit enter')
" }

" General {
    set background=dark         " Assume a dark background
    filetype plugin indent on   " Automatically detect file types.
    syntax on                   " syntax highlighting
    set mouse=a                 " automatically enable mouse usage
    set mousehide               " hide the mouse cursor while typing
    scriptencoding utf-8

    " always switch to the current file directory.
    autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif

    set shortmess+=filmnrxoOtT      " abbrev. of messages (avoids 'hit enter')
    set viewoptions=folds,options,cursor,unix,slash " better unix / windows compatibility
    set virtualedit=onemore         " allow for cursor beyond last character
    set history=1000                " Store a ton of history (default is 20)
    " set spell                     " spell checking on
    set hidden                      " allow buffer switching without saving

    " Setting up the directories {
        " turn off backups
        set nobackup
        set nowritebackup
        " Store swap files in fixed location, not current directory.
        set dir=~/.vimswap//,/var/tmp//,/tmp//,.
        
        if has('persistent_undo')
            set undofile                "so is persistent undo ...
            set undolevels=1000         "maximum number of changes that can be undone
            set undoreload=10000        "maximum number lines to save for undo on a buffer reload
        endif
    " }
" }

" Vim UI {
    if filereadable(expand("~/.vim/bundle/vim-colors-solarized/colors/solarized.vim"))
        let g:solarized_termcolors=256
        color solarized                 " load a colorscheme
    endif
        let g:solarized_termtrans=1
        let g:solarized_contrast="high"
        let g:solarized_visibility="high"
    set tabpagemax=15               " only show 15 tabs
    set showmode                    " display the current mode

    set cursorline                  " highlight current line

    if has('cmdline_info')
        set ruler                   " show the ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " a ruler on steroids
        set showcmd                 " show partial commands in status line and
                                    " selected characters/lines in visual mode
    endif

    if has('statusline')
        set laststatus=2

        " Broken down into easily includeable segments
        set statusline=%<%f\    " Filename
        set statusline+=%w%h%m%r " Options
        set statusline+=%{fugitive#statusline()} "  Git Hotness
        set statusline+=\ [%{&ff}/%Y]            " filetype
        set statusline+=\ [%{getcwd()}]          " current dir
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
    endif

    set backspace=indent,eol,start  " backspace over everything in insert mode
    set linespace=0                 " No extra spaces between rows
    set nu                          " Line numbers on
    set showmatch                   " show matching brackets/parenthesis
    set incsearch                   " find as you type search
    set hlsearch                    " highlight search terms
    set winminheight=0              " windows can be 0 line high
    set ignorecase                  " case insensitive search
    set smartcase                   " case sensitive when uc present
    set wildmenu                    " show list instead of just completing
    set wildmode=list:longest,full  " command <Tab> completion, list matches, then longest common part, then all.
    set whichwrap=b,s,h,l,<,>,[,]   " backspace and cursor keys wrap too
    set scrolljump=5                " lines to scroll when cursor leaves screen
    set scrolloff=3                 " minimum lines to keep above and below cursor
    set foldenable                  " auto fold code
    set list
    set listchars=tab:,.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace


" }

" Formatting {
    set nowrap                      " don't wrap long lines
    set autoindent                  " indent at the same level of the previous line
    set shiftwidth=2                " use indents of 2 spaces
    set expandtab                   " tabs are spaces, not tabs
    set tabstop=2                   " an indentation every four columns
    set softtabstop=2               " let backspace delete indent
    "set matchpairs+=<:>                " match, to be used with %
    set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
    "set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks
    " Remove trailing whitespaces and ^M chars
    autocmd FileType c,cpp,java,php,javascript,python,twig,xml,yml autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))
" }

" Key (re)Mappings {
    " \ for Leader
    let mapleader = "\\"

    " Easier moving in tabs and windows
    map <C-J> <C-W>j<C-W>_
    map <C-K> <C-W>k<C-W>_
    map <C-L> <C-W>l<C-W>_
    map <C-H> <C-W>h<C-W>_

    " Wrapped lines goes down/up to next row, rather than next line in file.
    nnoremap j gj
    nnoremap k gk


    " Stupid shift key fixes
    if has("user_commands")
        command! -bang -nargs=* -complete=file E e<bang> <args>
        command! -bang -nargs=* -complete=file W w<bang> <args>
        command! -bang -nargs=* -complete=file Wq wq<bang> <args>
        command! -bang -nargs=* -complete=file WQ wq<bang> <args>
        command! -bang Wa wa<bang>
        command! -bang WA wa<bang>
        command! -bang Q q<bang>
        command! -bang QA qa<bang>
        command! -bang Qa qa<bang>

        cmap Tabe tabe
    endif

    " Yank from the cursor to the end of the line, to be consistent with C and D.
    nnoremap Y y$

    """ Code folding options
    nmap <leader>f0 :set foldlevel=0<CR>
    nmap <leader>f1 :set foldlevel=1<CR>
    nmap <leader>f2 :set foldlevel=2<CR>
    nmap <leader>f3 :set foldlevel=3<CR>
    nmap <leader>f4 :set foldlevel=4<CR>
    nmap <leader>f5 :set foldlevel=5<CR>
    nmap <leader>f6 :set foldlevel=6<CR>
    nmap <leader>f7 :set foldlevel=7<CR>
    nmap <leader>f8 :set foldlevel=8<CR>
    nmap <leader>f9 :set foldlevel=9<CR>

    "clearing highlighted search
    nmap <silent> <leader>h :nohlsearch<CR>

    " Shortcuts
    " Change Working Directory to that of the current file
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h

    " visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " Fix home and end keybindings for screen, particularly on mac
    " - for some reason this fixes the arrow keys too. huh.
    map [F $
    imap [F $
    map [H g0
    imap [H g0

    " For when you forget to sudo.. Really Write the file.
    cmap w!! w !sudo tee % >/dev/null

    " Some helpers to edit mode
    " http://vimcasts.org/e/14
    cnoremap %% <C-R>=expand('%:h').'/'<cr>
    map <leader>ew :e %%
    map <leader>es :sp %%
    map <leader>ev :vsp %%
    map <leader>et :tabe %%

    " Adjust viewports to the same size
    map <Leader>= <C-w>=

    " map <Leader>ff to display all lines with keyword under cursor
    " and ask which one to jump to
    nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

    " Easier horizontal scrolling
    map zl zL
    map zh zH
    
    " Keep search result in center of screen.
    nnoremap <silent> n nzz
    nnoremap <silent> N Nzz
    nnoremap <silent> * *zz
    nnoremap <silent> # #zz
    nnoremap <silent> g* g*zz
    nnoremap <silent> g# g#zz
" }

" Plugins {
    " Misc {
        let g:NERDShutUp=1
        let b:match_ignorecase = 1
    " }

    " " OmniComplete {
    "     if has("autocmd") && exists("+omnifunc")
    "         autocmd Filetype *
    "             \if &omnifunc == "" |
    "             \setlocal omnifunc=syntaxcomplete#Complete |
    "             \endif
    "     endif

    "     hi Pmenu  guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
    "     hi PmenuSbar  guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
    "     hi PmenuThumb  guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE

    "     " some convenient mappings
    "     inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
    "     inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
    "     inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
    "     inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
    "     inoremap <expr> <C-d>      pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
    "     inoremap <expr> <C-u>      pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"

    "     " automatically open and close the popup menu / preview window
    "     au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
    "     set completeopt=menu,preview,longest
    " " }

    " Ctags {
        set tags=./tags;/,~/.vimtags
    " }

    " AutoCloseTag {
        " Make it so AutoCloseTag works for xml and xhtml files as well
        " au FileType xhtml,xml ru ftplugin/html/autoclosetag.vim
        " nmap <Leader>ac <Plug>ToggleAutoCloseMappings
    " }

    " SnipMate {
        " Setting the author var
        " If forking, please overwrite in your .vimrc.local file
        let g:snips_author = 'Steve Francia <steve.francia@gmail.com>'
    " }

    " NerdTree {
        map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
        map <leader>e :NERDTreeFind<CR>
        nmap <leader>nt :NERDTreeFind<CR>

        let NERDTreeShowBookmarks=1
        let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
        let NERDTreeChDirMode=0
        let NERDTreeQuitOnOpen=1
        let NERDTreeMouseMode=2
        let NERDTreeShowHidden=1
        let NERDTreeKeepTreeInNewTab=1
        let g:nerdtree_tabs_open_on_gui_startup=0
    " }

    " Tabularize {
        nmap <Leader>a= :Tabularize /=<CR>
        vmap <Leader>a= :Tabularize /=<CR>
        nmap <Leader>a: :Tabularize /:<CR>
        vmap <Leader>a: :Tabularize /:<CR>
        nmap <Leader>a:: :Tabularize /:\zs<CR>
        vmap <Leader>a:: :Tabularize /:\zs<CR>
        nmap <Leader>a, :Tabularize /,<CR>
        vmap <Leader>a, :Tabularize /,<CR>
        nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
        vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
     " }

     " Buffer explorer {
      " nmap <leader>b :BufExplorer<CR>
     " }

     " JSON {
        nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
     " }

     " ctrlp {
        " nnoremap <silent> <D-t> :CtrlP<CR>
        " nnoremap <silent> <D-r> :CtrlPMRU<CR>
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$\|\.dll$' }
        let g:ctrlp_match_window_bottom = 0 "Put the match window on top
        let g:ctrlp_match_window_reversed = 0 "Put best match on top of match window
        let g:ctrlp_switch_buffer = 0 " Don't jump to existing buffer/tab instances of file matches
        let g:ctrlp_jump_to_buffer = 0 " Don't jump to existing buffer/tab instances of file matches
        let g:ctrlp_working_path_mode = 'ra'
        let g:ctrlp_map = '<Leader>t'
        map <Leader>b :CtrlPBuffer<CR>
     "}

     " TagBar {
        nnoremap <silent> <leader>tt :TagbarToggle<CR>
     "}

     " PythonMode {
     " Disable if python support not present
        if !has('python')
           let g:pymode = 1
        endif
     " }

     " Fugitive {
        nnoremap <silent> <leader>gs :Gstatus<CR>
        nnoremap <silent> <leader>gd :Gdiff<CR>
        nnoremap <silent> <leader>gc :Gcommit<CR>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>gl :Glog<CR>
        nnoremap <silent> <leader>gp :Git push<CR>
     "}

     "" neocomplcache {
     "    let g:acp_enableAtStartup = 0
     "    let g:neocomplcache_enable_at_startup = 1
     "    let g:neocomplcache_enable_smart_case = 1
     "    let g:neocomplcache_min_syntax_length = 3
     "    let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

     "    " Define dictionary.
     "    let g:neocomplcache_dictionary_filetype_lists = {
     "                \ 'default' : '',
     "                \ 'vimshell' : $HOME.'/.vimshell_hist',
     "                \ 'scheme' : $HOME.'/.gosh_completions'
     "                \ }

     "    " Define keyword.
     "    if !exists('g:neocomplcache_keyword_patterns')
     "        let g:neocomplcache_keyword_patterns = {}
     "    endif
     "    let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

     "    " Plugin key-mappings.
     "    inoremap <expr><C-g> neocomplcache#undo_completion()
     "    inoremap <expr><C-l> neocomplcache#complete_common_string()

     "    " Recommended key-mappings.
     "    " <CR>: close popup and save indent.
     "    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
     "    function! s:my_cr_function()
     "        return neocomplcache#smart_close_popup() . "\<CR>"
     "        " For no inserting <CR> key.
     "        "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
     "    endfunction
     "    " <TAB>: completion.
     "    inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
     "    " <C-h>, <BS>: close popup and delete backword char.
     "    inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
     "    inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
     "    inoremap <expr><C-y> neocomplcache#close_popup()
     "    inoremap <expr><C-e> neocomplcache#cancel_popup()

     "    " Enable omni completion.
     "    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
     "    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
     "    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
     "    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
     "    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
     "    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

     "    " Enable heavy omni completion.
     "    if !exists('g:neocomplcache_omni_patterns')
     "        let g:neocomplcache_omni_patterns = {}
     "    endif
     "    let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
     "    let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
     "    let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
     "    let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
     "" }

     " neosnippet {
         " use honza's snippets
      "   let g:neosnippet#snippets_directory='~/.vim/bundle/snipmate-snippets/snippets'

         " Plugin key-mappings.
         " imap <C-k> <Plug>(neosnippet_expand_or_jump)
         " smap <C-k> <Plug>(neosnippet_expand_or_jump)
         " xmap <C-k> <Plug>(neosnippet_expand_target)
         " xmap <C-l> <Plug>(neosnippet_start_unite_snippet_target)

         " " For snippet_complete marker.
         " if has('conceal')
         "     set conceallevel=2 concealcursor=i
         " endif

     " }

     " UndoTree {
        nnoremap <Leader>u :UndotreeToggle<CR>
        let g:undotree_SetFocusWhenToggle=1 " if undotree is opened, it is likely one wants to interact with it.
     " }

     " indent_guides {
        if !exists('g:spf13_no_indent_guides_autocolor')
            let g:indent_guides_auto_colors = 1
        else
            " for some colorscheme ,autocolor will not work,like 'desert','ir_black'.
            autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#212121   ctermbg=3
            autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#404040 ctermbg=4
        endif
        set ts=2 sw=2 et
        let g:indent_guides_start_level = 2
        let g:indent_guides_guide_size = 1
        let g:indent_guides_enable_on_vim_startup = 0
     " }

" }

" GUI Settings {
    " GVIM- (here instead of .gvimrc)
    if has('gui_running')
        set guioptions-=T           " remove the toolbar
        set lines=40                " 40 lines of text instead of 24,
        if has("gui_gtk2")
            set guifont=Andale\ Mono\ Regular\ 16,Menlo\ Regular\ 15,Consolas\ Regular\ 16,Courier\ New\ Regular\ 18
        else
            set guifont=Source\ Code\ Pro\ ExtraLight:h14,Andale\ Mono\ Regular:h16,Menlo\ Regular:h15,Consolas\ Regular:h16,Courier\ New\ Regular:h18
            set noantialias
        endif
        if has('gui_macvim')
            set transparency=0          " Ensure the window is completely opaque
        endif
    else
        if &term == 'xterm' || &term == 'screen'
            set t_Co=256                 " Enable 256 colors to stop the CSApprox warning and make xterm vim shine
        endif
        "set term=builtin_ansi       " Make arrow and other keys work
    endif
" }

 " Functions {
function! InitializeDirectories()
    let separator = "."
    let parent = $HOME
    let prefix = '.vim'
    let dir_list = {
                \ 'backup': 'backupdir',
                \ 'views': 'viewdir',
                \ 'swap': 'directory' }

    if has('persistent_undo')
        let dir_list['undo'] = 'undodir'
    endif

    for [dirname, settingname] in items(dir_list)
        let directory = parent . '/' . prefix . dirname . "/"
        if exists("*mkdir")
            if !isdirectory(directory)
                call mkdir(directory)
            endif
        endif
        if !isdirectory(directory)
            echo "Warning: Unable to create backup directory: " . directory
            echo "Try: mkdir -p " . directory
        else
            let directory = substitute(directory, " ", "\\\\ ", "g")
            exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction
call InitializeDirectories()

function! NERDTreeInitAsNeeded()
    redir => bufoutput
    buffers!
    redir END
    let idx = stridx(bufoutput, "NERD_tree")
    if idx > -1
        NERDTreeMirror
        NERDTreeFind
        wincmd l
    endif
endfunction
" }


" Smart indent options
" set smartindent

" Folding
if has("folding")
  set foldenable
  set foldmethod=indent
  set foldlevel=1
  set foldnestmax=10
  set foldtext=strpart(getline(v:foldstart),0,50).'\ ...\ '.substitute(getline(v:foldend),'^[\ #]*','','g').'\ '
endif

" Leader shortcuts for Rails commands
map <Leader>m :Rmodel 
map <Leader>c :Rcontroller 
map <Leader>v :Rview 
map <Leader>u :Runittest 
map <Leader>f :Rfunctionaltest 
map <Leader>sm :RSmodel 
map <Leader>sc :RScontroller 
map <Leader>sv :RSview 
map <Leader>su :RSunittest 
map <Leader>sf :RSfunctionaltest 
" Edit routes
command! Rroutes :e config/routes.rb
command! RTroutes :tabe config/routes.rb

" Maps autocomplete to Control-Space
" imap <c-space> <C-N>

" Duplicate a selection
" Visual mode: D
vmap D y'>p

" For Haml
au! BufRead,BufNewFile *.haml         setfiletype haml

" No Help, please
nmap <F1> <Esc>

" Local config
if filereadable(".vimrc.local")
  source .vimrc.local
endif

" Use Ack instead of Grep when available
" if executable("ack")
"   set grepprg=ack\ -H\ --nogroup\ --nocolor
" endif

" Tab completion options
" (only complete to the longest unambiguous match, and show a menu)
"set completeopt=longest,menu
"set wildmode=list:longest,list:full
"set complete=.,t

" Ignore some dirs
set wildignore+=*/.git/*,*/.hg/*,*/.svn/* 

" Make Control+V do a system clipboard paste in normal and insert modes
" nmap <C-V> "+gP
" imap <C-V> <ESC><C-V>i

" Nerd Tree shortcut
map <leader>n :NERDTreeToggle<CR>

" Make jj take us out of insert mode
imap jj <esc>

if (has("gui_running"))
  " Make fullscreen mode window size take up the full screen
  set fuoptions=maxvert,maxhorz
  "
  " Remove the vim toolbar from Win/GTK versions
  set guioptions-=T
endif

" Turn off the arrow keys for learning cardinal hjkl directions.
" map <up> <nop>
" map <down> <nop>
" map <left> <nop>
" map <right> <nop>

" add in matchit.vim built in plugin
runtime macros/matchit.vim

" How to run current ruby file as ruby script and show result in new window:
" :w !ruby | mvim -c "set nomodified" -

" Turn off K (defaults to search for word under cursor, but I always typo it
" when I mean to type J to join lines.
  nmap K <nop>

" I always fat-finger :W when I mean :w, so bind it
cmap W w

" vim-slime settings
let g:slime_target = "tmux"

" use ; instead of (or in addition to) : because it is quicker
nnoremap ; :

" use | and - for splits faster
nmap <bar> <C-w>v
nmap - <C-w>s
